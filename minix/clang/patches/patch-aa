$NetBSD$

--- lib/CodeGen/TargetLoweringObjectFileImpl.cpp.orig	Thu Aug 26 11:47:43 2010
+++ lib/CodeGen/TargetLoweringObjectFileImpl.cpp
@@ -332,6 +332,7 @@ SelectSectionForGlobal(const GlobalValue *GV, SectionK
 
   if (Kind.isText()) return TextSection;
 
+#ifndef __minix
   if (Kind.isMergeable1ByteCString() ||
       Kind.isMergeable2ByteCString() ||
       Kind.isMergeable4ByteCString()) {
@@ -373,12 +374,16 @@ SelectSectionForGlobal(const GlobalValue *GV, SectionK
 
   if (Kind.isThreadData())           return TLSDataSection;
   if (Kind.isThreadBSS())            return TLSBSSSection;
+#endif
 
   // Note: we claim that common symbols are put in BSSSection, but they are
   // really emitted with the magic .comm directive, which creates a symbol table
   // entry but not a section.
   if (Kind.isBSS() || Kind.isCommon()) return BSSSection;
 
+#ifdef __minix
+  return DataSection;
+#else
   if (Kind.isDataNoRel())            return DataSection;
   if (Kind.isDataRelLocal())         return DataRelLocalSection;
   if (Kind.isDataRel())              return DataRelSection;
@@ -386,6 +391,7 @@ SelectSectionForGlobal(const GlobalValue *GV, SectionK
 
   assert(Kind.isReadOnlyWithRel() && "Unknown section kind");
   return DataRelROSection;
+#endif
 }
 
 /// getSectionForConstant - Given a mergeable constant with the
@@ -393,6 +399,9 @@ SelectSectionForGlobal(const GlobalValue *GV, SectionK
 /// should be placed in.
 const MCSection *TargetLoweringObjectFileELF::
 getSectionForConstant(SectionKind Kind) const {
+#ifdef __minix
+  return DataSection;
+#else
   if (Kind.isMergeableConst4() && MergeableConst4Section)
     return MergeableConst4Section;
   if (Kind.isMergeableConst8() && MergeableConst8Section)
@@ -405,6 +414,7 @@ getSectionForConstant(SectionKind Kind) const {
   if (Kind.isReadOnlyWithRelLocal()) return DataRelROLocalSection;
   assert(Kind.isReadOnlyWithRel() && "Unknown section kind");
   return DataRelROSection;
+#endif
 }
 
 const MCExpr *TargetLoweringObjectFileELF::
