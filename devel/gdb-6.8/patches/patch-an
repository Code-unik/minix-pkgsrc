$NetBSD$

--- gdb/infrun.c.orig	Tue Jan 29 22:47:19 2008
+++ gdb/infrun.c
@@ -694,7 +694,10 @@ prepare_to_proceed (int step)
 
   /* Make sure we were stopped at a breakpoint.  */
   if (wait_status.kind != TARGET_WAITKIND_STOPPED
-      || wait_status.value.sig != TARGET_SIGNAL_TRAP)
+      || (wait_status.value.sig != TARGET_SIGNAL_TRAP
+	  && wait_status.value.sig != TARGET_SIGNAL_ILL
+	  && wait_status.value.sig != TARGET_SIGNAL_SEGV
+	  && wait_status.value.sig != TARGET_SIGNAL_EMT))
     {
       return 0;
     }
@@ -1228,7 +1231,13 @@ adjust_pc_after_break (struct execution_control_state 
   if (ecs->ws.kind != TARGET_WAITKIND_STOPPED)
     return;
 
-  if (ecs->ws.value.sig != TARGET_SIGNAL_TRAP)
+  /*
+   * In MINIX, TARGET_SIGNAL_EMT is received after executing an
+   * 'int 0x3' (software break) on the i386 architecture, so we
+   * must check this here
+   */
+  if (ecs->ws.value.sig != TARGET_SIGNAL_TRAP
+	&& ecs->ws.value.sig != TARGET_SIGNAL_EMT)
     return;
 
   /* Find the location where (if we've hit a breakpoint) the
@@ -1568,6 +1577,20 @@ handle_inferior_event (struct execution_control_state 
       if (debug_infrun)
         fprintf_unfiltered (gdb_stdlog, "infrun: TARGET_WAITKIND_STOPPED\n");
       stop_signal = ecs->ws.value.sig;
+      stop_pc = read_pc_pid (ecs->ptid);
+
+      /* Change SIGEMT to SIGTRAP */
+      if(breakpoint_inserted_here_p (stop_pc)
+	&& (ecs->ws.value.sig == TARGET_SIGNAL_ILL
+	  || ecs->ws.value.sig == TARGET_SIGNAL_SEGV
+	  || ecs->ws.value.sig == TARGET_SIGNAL_EMT))
+      {
+        if (debug_infrun)
+	    fprintf_unfiltered (gdb_stdlog,
+				"infrun: Treating signal as SIGTRAP\n");
+	 ecs->ws.value.sig = TARGET_SIGNAL_TRAP;
+      }
+
       break;
 
       /* We had an event in the inferior, but we are not interested
@@ -2073,6 +2096,11 @@ process_event_stop_test:
 	     signal return address and then, once hit, step off that
 	     breakpoint.  */
 
+          /* FIXME: On MINIX, when resuming execution of the inferior,
+	     it receives signal 28, ignore it for now */
+          if (stop_signal == 28)
+	    goto temp_solution;
+
 	  insert_step_resume_breakpoint_at_frame (get_current_frame ());
 	  ecs->step_after_step_resume_breakpoint = 1;
 	  keep_going (ecs);
@@ -2109,6 +2137,8 @@ process_event_stop_test:
       keep_going (ecs);
       return;
     }
+
+temp_solution:
 
   /* Handle cases caused by hitting a breakpoint.  */
   {
